1.git checkout main
2.git pull origin main
3.git checkout A
4.git merge main
5. solve conflict
6. push len A

-- Tạo bảng lưu trữ thông tin sách
CREATE TABLE Book (
    google_book_id VARCHAR(50) PRIMARY KEY,  -- ID từ Google Books API làm khóa chính
    title VARCHAR(255) NOT NULL,
    publishDate date,
    authors TEXT,
    category TEXT,
    description TEXT,
    thumbnail blob,
    page_count INT,
    state varchar(20),
    quantity int,
    countRating int,
    sumRatingStar int,
    totalLoan int, -- day la so luong dang muon
    numBorrowing int,--  day la so luong muon tong cong (chi duoc cap nhat khi muon, khog cap nhat khi tra)
    language VARCHAR(20)
) COLLATE utf8mb4_bin;

alter table book
add column thumbnail blob;

update book
set state = 'publishing'
where google_book_id >= '1' and google_book_id <= '30';

-- Bảng User
CREATE TABLE User (
    user_id VARCHAR(20) PRIMARY KEY,
    fullName varchar(50),
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    state VARCHAR(20) DEFAULT 'active'
    -- state : banned, active, deleted
)COLLATE utf8mb4_bin;


-- Tạo bảng feedback để chứa đánh giá của người dùng về sách
CREATE TABLE Feedback (
    user_id VARCHAR(20),
    google_book_id VARCHAR(50),
    primary key(user_id, google_book_id),
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (google_book_id) REFERENCES Book(google_book_id)
)COLLATE utf8mb4_bin;

drop table feedback;

alter table feedback
add primary key (user_id, google_book_id);

-- Tạo bảng lịch sử mượn trả chung cho tất cả user (Chỉ admin có thể xem)
CREATE TABLE BookLoans (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(20),
    google_book_id VARCHAR(50),
    borrow_date DATE NOT NULL,
    return_date DATE,
    due_date DATE,
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (google_book_id) REFERENCES Book(google_book_id)
)COLLATE utf8mb4_bin;

CREATE TABLE Admin (
    admin_id VARCHAR(20) PRIMARY KEY,
    fullName varchar(50),
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
)COLLATE utf8mb4_bin;

create table favorite(
	user_id VARCHAR(20),
    google_book_id VARCHAR(50),
    primary key(user_id, google_book_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (google_book_id) REFERENCES Book(google_book_id)
)COLLATE utf8mb4_bin;

-- de xuat cho admin them sach vao
create table BookRcm (
    google_book_id varchar(50),
    user_id varchar(20),
    primary key(google_book_id, user_id),
    FOREIGN KEY (google_book_id) REFERENCES Book(google_book_id),
    FOREIGN KEY (user_id) REFERENCES user(user_id),
    state varchar(20)
    -- state : in queue or accepted or ignored
)COLLATE utf8mb4_bin;


DELIMITER //

CREATE TRIGGER trg_update_rating_after_insert
AFTER INSERT ON Feedback
FOR EACH ROW
BEGIN
    -- Cập nhật `sumRatingStar` và `countRating` của sách khi có feedback mới
    UPDATE Book
    SET sumRatingStar = sumRatingStar + NEW.rating,
        countRating = countRating + 1
    WHERE google_book_id = NEW.google_book_id;
END//

DELIMITER ;


DELIMITER //

CREATE TRIGGER trg_update_countLoan_after_insert
AFTER INSERT ON BookLoans
FOR EACH ROW
BEGIN
    -- Tăng `countLoan` của sách khi có bản ghi mượn mới
    UPDATE Book
    SET totalLoan = totalLoan + 1,
    numBorrowing = numBorrowing + 1
    WHERE google_book_id = NEW.google_book_id;
END//

DELIMITER ;


DELIMITER //

CREATE TRIGGER trg_update_countLoan_after_return
AFTER UPDATE ON BookLoans
FOR EACH ROW
BEGIN
    -- Kiểm tra nếu `return_date` vừa được gán giá trị khác NULL
    IF NEW.return_date IS NOT NULL AND OLD.return_date IS NULL THEN
        -- Giảm `countLoan` của sách khi trả sách thành công
        UPDATE Book
        SET numBorrowing = numBorrowing - 1
        WHERE google_book_id = NEW.google_book_id;
    END IF;
END//

DELIMITER ;


DELIMITER //

CREATE EVENT evt_ban_overdue_users
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    UPDATE User u
    SET u.state = 'banned'
    WHERE u.state != 'banned'  -- Chỉ cập nhật nếu trạng thái chưa bị cấm
    AND EXISTS (
        SELECT 1
        FROM BookLoans bl
        WHERE bl.user_id = u.user_id
        AND bl.return_date IS NULL  -- Sách chưa được trả
        AND DATEDIFF(CURDATE(), bl.due_date) > 60  -- Quá hạn 60 ngày
    );
END//

DELIMITER ;

SET GLOBAL event_scheduler = ON;




DELIMITER //
CREATE TRIGGER after_feedback_delete
AFTER DELETE ON Feedback
FOR EACH ROW
BEGIN
    UPDATE Book
    SET countRating = countRating - 1,
        sumRatingStar = sumRatingStar - OLD.rating
    WHERE google_book_id = OLD.google_book_id;
END;

DELIMITER;


DELIMITER //

CREATE TRIGGER after_feedback_update
AFTER UPDATE ON Feedback
FOR EACH ROW
BEGIN
    UPDATE Book
    SET sumRatingStar = sumRatingStar - OLD.rating + NEW.rating
    WHERE google_book_id = NEW.google_book_id;
END;

DELIMITER;





